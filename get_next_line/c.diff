diff --git a/get_next_line/get_next_line b/get_next_line/get_next_line
index 3e6a063..864adaf 100755
Binary files a/get_next_line/get_next_line and b/get_next_line/get_next_line differ
diff --git a/get_next_line/get_next_line.c b/get_next_line/get_next_line.c
index c19913e..9663035 100644
--- a/get_next_line/get_next_line.c
+++ b/get_next_line/get_next_line.c
@@ -6,10 +6,12 @@
 /*   By: heson <heson@student.42seoul.kr>           +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2022/09/21 21:35:12 by heson             #+#    #+#             */
-/*   Updated: 2022/09/28 17:01:24 by heson            ###   ########.fr       */
+/*   Updated: 2022/09/30 13:29:03 by heson            ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
+
+
 // #include "get_next_line.h"
 
 # include <unistd.h>
@@ -46,7 +48,7 @@ char	*my_strcat(char *dst, char const *src, size_t n)
 	return (dst);
 }
 
-t_Buf	*add_buf(t_Buf **last, char *data, size_t data_len)
+t_Buf	*add_buf(t_Buf **buflst, t_Buf **last, char *data, size_t data_len)
 {
 	t_Buf	*new_buf;
 	char	*bufdata_p;
@@ -68,6 +70,8 @@ t_Buf	*add_buf(t_Buf **last, char *data, size_t data_len)
 		*last = new_buf;
 	else
 		(*last)->next = new_buf;
+	if (!*buflst)
+		*buflst = *last;
 	return (new_buf);
 }
 
@@ -76,6 +80,8 @@ void	free_buflst(t_Buf **buflst, t_Buf *new_head)
 	t_Buf	*p;
 	t_Buf	*next_p;
 
+	if (!buflst)
+		return;
 	p = *buflst;
 	while (p && p != new_head)
 	{
@@ -87,7 +93,7 @@ void	free_buflst(t_Buf **buflst, t_Buf *new_head)
 	*buflst = new_head;
 }
 
-char	find_next_line_buf(t_Buf *buflst, t_Buf **ep, size_t *line_len)
+t_Buf	*find_next_line_buf(t_Buf *buflst, size_t *line_len)
 {
 	t_Buf	*buf_p;
 	char	*data_p;
@@ -109,100 +115,95 @@ char	find_next_line_buf(t_Buf *buflst, t_Buf **ep, size_t *line_len)
 	}
 	if (is_nextline_found)
 	{
-		*ep = buf_p;
 		*line_len = len;
+		return (buf_p);
 	}
-	return (is_nextline_found);
+	return (NULL);
 }
 
-// too many lines
-char	read_bufsize(t_Info i, t_Buf **buflst, t_Buf **lst_last, t_Buf **ep)
+char	read_bufsize(t_Info i, char **data, size_t *read_size)
 {
-	char	*data;
-	char	*newline_p;
-	char	*tmp;
 	char	is_nextline_found;
-	size_t	read_size;
 
-	data = (char *)malloc(i.buf_size * sizeof(char) + 1);
-	if (!data)
+	*data = (char *)malloc(i.buf_size * sizeof(char) + 1);
+	if (!*data)
 		return (ERROR_I);
-	read_size = read(i.fd, data, i.buf_size);
-	data[read_size] = '\0';
-	if (!read_size)
-	{
-		*ep = *lst_last;
-		*lst_last = add_buf(lst_last, data, 1);
+	*read_size = read(i.fd, *data, i.buf_size);
+	(*data)[*read_size] = '\0';
+	if (!*read_size)
 		return (TRUE);
-	}
+	return (FALSE);
+}
+
+// too many lines
+char	data_2_buflst(char	*data, t_Buf **buflst, t_Buf **last, t_Buf **buf_ep)
+{
+	char	*newline_p;
+	char	*data_p;
+	char	is_nextline_found;
+
 	newline_p = data;
+	data_p = data;
+	*buf_ep = NULL;
 	is_nextline_found = FALSE;
-	tmp = data;
 	while (*newline_p)
 	{
-		if (*newline_p == '\n')
+		if (*newline_p == '\n' || *(newline_p + 1) == '\0')
 		{
-			*lst_last = add_buf(lst_last, tmp, newline_p - tmp + 1);
-			if (*lst_last == ERROR_P)
+			*last = add_buf(buflst, last, data_p, newline_p - data_p + 1);
+			if (*last == ERROR_P)
 			{
 				free(data);
 				return (ERROR_I);
 			}
-			if (!*buflst)
-				*buflst = *lst_last;
-			if (!is_nextline_found)
-				*ep = *lst_last;
-			is_nextline_found = TRUE;
-			tmp = newline_p + 1;
+			if (!*buf_ep) 
+				*buf_ep = *last;
+			if (*newline_p == '\n')
+				is_nextline_found = TRUE;
+			data_p = newline_p + 1;
 		}
 		newline_p++;
 	}
-	if (read_size - (tmp - data) > 0)
-		*lst_last = add_buf(lst_last, tmp, read_size - (tmp - data));
-	free(data);
-	// if (!read_size || is_nextline_found)
-	// 	return (TRUE);
-	return (FALSE);
+	return (is_nextline_found);
 }
 
 t_Buf	*read_line(t_Info i, t_Buf **buflst, t_Buf **last, size_t *line_len)
 {
 	char	is_line_end;
 	t_Buf	*buf_ep;
+	char	*data;
+	size_t	read_size;
 
 	is_line_end = FALSE;
 	while (!is_line_end)
 	{
-		if (*buflst)
-			is_line_end = find_next_line_buf(*buflst, &buf_ep, line_len);
-		if (is_line_end == TRUE)
-			return (buf_ep);
-		is_line_end = read_bufsize(i, buflst, last, &buf_ep);
+		is_line_end = read_bufsize(i, &data, &read_size);
 		if (is_line_end == ERROR_I)
 			return (ERROR_P);
-		if (!*buflst)
-			*buflst = *last;
+		if (is_line_end) // EOF
+		{
+			buf_ep = *last;
+			*last = add_buf(buflst, last, data, 1);
+		}
+		else
+		{
+			is_line_end = data_2_buflst(data, buflst, last, &buf_ep);
+			if (!buf_ep)
+				return (ERROR_P);
+		}
+		free(data);
 	}
 	return (buf_ep);
 }
 
-// too many lines
 char	*integrate_to_line(t_Buf *buflst, t_Buf *ep, size_t line_len)
 {
 	char	*line;
 	char	*line_p;
-	// size_t	line_len;
 	t_Buf	*buflst_p;
 
 	if (!ep || !*(ep->data))
 		return (NULL);
-	// line_len = 0;
-	// buflst_p = buflst;
-	// while (buflst_p && buflst_p != ep->next)
-	// {
-	// 	line_len += buflst_p->data_len;
-	// 	buflst_p = buflst_p->next;
-	// }
 	line = (char *)malloc(line_len * sizeof(char) + 1);
 	if (!line)
 		return (ERROR_P);
@@ -219,17 +220,23 @@ char	*integrate_to_line(t_Buf *buflst, t_Buf *ep, size_t line_len)
 
 char	*get_line(t_Info info, t_Buf **buflst, size_t *backup_len)
 {
-	char	*line;
-	size_t	line_len;
+	char			*line;
+	size_t			line_len;
 	static t_Buf	*buflst_last;
-	t_Buf	*buf_ep;
+	t_Buf			*buf_ep;
 
 	line_len = 0;
-	buf_ep = read_line(info, buflst, &buflst_last, &line_len);
-	if (!buf_ep) // EOF
+	buf_ep = NULL;
+	if (*buflst)
+		buf_ep = find_next_line_buf(*buflst, &line_len);
+	if (!buf_ep)
 	{
-		free_buflst(buflst, NULL);
-		return (NULL);
+		buf_ep = read_line(info, buflst, &buflst_last, &line_len);
+		if (!buf_ep) // EOF
+		{
+			free_buflst(buflst, NULL);
+			return (NULL);
+		}
 	}
 	line = integrate_to_line(*buflst, buf_ep, line_len);
 	free_buflst(buflst, buf_ep->next);
diff --git a/get_next_line/get_next_line.dSYM/Contents/Resources/DWARF/get_next_line b/get_next_line/get_next_line.dSYM/Contents/Resources/DWARF/get_next_line
index 7eb905e..07dca40 100644
Binary files a/get_next_line/get_next_line.dSYM/Contents/Resources/DWARF/get_next_line and b/get_next_line/get_next_line.dSYM/Contents/Resources/DWARF/get_next_line differ
diff --git a/get_next_line/test.txt b/get_next_line/test.txt
index 3902119..ce01362 100644
--- a/get_next_line/test.txt
+++ b/get_next_line/test.txt
@@ -1,3 +1 @@
-aaaaaaaaaaaaaaaaaa
-
-bb
\ No newline at end of file
+hello
